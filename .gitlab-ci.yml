image: registry.gitlab.com/obsessvr/ci-scripts/frontend_build_agent_1.1.0:latest

stages:
  - build
  - deploy


variables:
  DEPLOY_PATH_BASE: s3://obsess-modules-federation
  CF_DISTRIBUTION_ID: E10BMWEDQJOONN

before_script:
  - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY


.build-template: &build-template
  stage: build
  script:
    - BUILD_IMAGE=$CI_REGISTRY_IMAGE/${BUILD_ENV}:${CI_COMMIT_SHORT_SHA}
    - MODULE_PATH=${BUILD_ENV}/${CI_PROJECT_PATH}/${CI_COMMIT_REF_NAME}
    - docker build --no-cache --build-arg BUILD_ENV=${BUILD_ENV} --build-arg MODULE_PATH=${MODULE_PATH} --compress --rm -f Dockerfile -t $BUILD_IMAGE .
    - docker push $BUILD_IMAGE


.deploy-template: &deploy-template
  stage: deploy
  script:
    - BUILD_IMAGE=$CI_REGISTRY_IMAGE/${BUILD_ENV}:${CI_COMMIT_SHORT_SHA}
    - MODULE_PATH=${BUILD_ENV}/${CI_PROJECT_PATH}/${CI_COMMIT_REF_NAME}
    - DEPLOY_PATH=${DEPLOY_PATH_BASE}/${MODULE_PATH}
    - IMAGE_CONTAINER=deploy_${CI_COMMIT_SHORT_SHA}_${BUILD_ENV}_${CI_JOB_ID}
    - docker create --name $IMAGE_CONTAINER $BUILD_IMAGE
    - mkdir /dist
    - docker cp $IMAGE_CONTAINER:/dist /
    - aws s3 cp --acl public-read --recursive /dist $DEPLOY_PATH
    - aws s3 sync --acl public-read --delete /dist $DEPLOY_PATH
    - aws cloudfront create-invalidation
      --distribution-id ${CF_DISTRIBUTION_ID}
      --paths "/${MODULE_PATH}/*"
    - docker rm $IMAGE_CONTAINER
    - docker rmi $BUILD_IMAGE



build:feature:
  <<: *build-template
  variables:
    BUILD_ENV: feature
  only:
    - /^feature\/.*$/


deploy:feature:
  <<: *deploy-template
  variables:
    BUILD_ENV: feature
  when: on_success
  needs:
    - build:feature
  environment:
    name: ${CI_COMMIT_REF_NAME}
    url: https://modules.obsess-vr.com/feature/${CI_PROJECT_PATH}/${CI_COMMIT_REF_NAME}/index.html
  only:
    - /^feature\/.*$/

build:beta:
  <<: *build-template
  variables:
    BUILD_ENV: beta
  only:
    - main


deploy:beta:
  <<: *deploy-template
  variables:
    BUILD_ENV: beta
  when: on_success
  needs:
    - build:beta
  only:
    - main

build:production:
  <<: *build-template
  variables:
    BUILD_ENV: production
  only:
    - main


deploy:production:
  <<: *deploy-template
  variables:
    BUILD_ENV: production
  when: manual
  needs:
    - build:production
  only:
    - main

build:client:
  <<: *build-template
  variables:
    BUILD_ENV: client
  only:
    - main


deploy:client:
  <<: *deploy-template
  variables:
    BUILD_ENV: client
  when: manual
  needs:
    - build:client
  only:
    - main
